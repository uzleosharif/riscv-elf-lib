
// SPDX-License-Identifier: MIT

#include "riscv_elf/riscv_elf.hpp"

#include <span>
#include <string>
#include <ranges>
#include <print>
#include <format>
#include <cassert>
#include <utility>

namespace rng = std::ranges;

auto PrintByteCode(std::span<std::byte const> bytecode) {
  std::println(
      "{}", bytecode |
                std::views::transform([](std::byte const byte) -> std::string {
                  return std::format("{:02x}", static_cast<int>(byte));
                }) |
                std::views::join | rng::to<std::string>());
}

auto ParseTest() {
  std::array<std::uint8_t, 914> expected_bytecode{
      0x41, 0x11, 0x81, 0x45, 0x22, 0xe0, 0x06, 0xe4, 0x2a, 0x84, 0xef, 0x00,
      0xa0, 0x1e, 0x03, 0xb5, 0x81, 0xf4, 0x3c, 0x6d, 0x91, 0xc3, 0x82, 0x97,
      0x22, 0x85, 0xef, 0x00, 0x00, 0x35, 0x93, 0x07, 0x00, 0x00, 0x89, 0xc7,
      0x41, 0x65, 0x13, 0x05, 0x85, 0x3a, 0x71, 0xa4, 0x82, 0x80, 0x97, 0x21,
      0x00, 0x00, 0x93, 0x81, 0x21, 0xb8, 0x13, 0x85, 0x01, 0xf6, 0x13, 0x86,
      0x81, 0xf9, 0x09, 0x8e, 0x81, 0x45, 0xef, 0x00, 0x80, 0x10, 0x17, 0x05,
      0x00, 0x00, 0x13, 0x05, 0x05, 0x27, 0x19, 0xc5, 0x17, 0x05, 0x00, 0x00,
      0x13, 0x05, 0x05, 0x27, 0xef, 0x00, 0xe0, 0x25, 0xef, 0x00, 0x40, 0x08,
      0x02, 0x45, 0x2c, 0x00, 0x01, 0x46, 0xef, 0x00, 0xe0, 0x04, 0x59, 0xbf,
      0x41, 0x11, 0x22, 0xe0, 0x83, 0xc7, 0x01, 0xf6, 0x06, 0xe4, 0x91, 0xef,
      0x93, 0x07, 0x00, 0x00, 0x81, 0xcb, 0x45, 0x65, 0x13, 0x05, 0xc5, 0x47,
      0x97, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x85, 0x47, 0x23, 0x80,
      0xf1, 0xf6, 0xa2, 0x60, 0x02, 0x64, 0x41, 0x01, 0x82, 0x80, 0x93, 0x07,
      0x00, 0x00, 0x91, 0xcb, 0x45, 0x65, 0x93, 0x85, 0x81, 0xf6, 0x13, 0x05,
      0xc5, 0x47, 0x17, 0x03, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x82, 0x80,
      0x01, 0x11, 0x22, 0xec, 0x00, 0x10, 0x91, 0x47, 0x23, 0x26, 0xf4, 0xfe,
      0x95, 0x47, 0x23, 0x24, 0xf4, 0xfe, 0x83, 0x27, 0xc4, 0xfe, 0x3e, 0x87,
      0x83, 0x27, 0x84, 0xfe, 0xb9, 0x9f, 0x23, 0x22, 0xf4, 0xfe, 0x81, 0x47,
      0x3e, 0x85, 0x62, 0x64, 0x05, 0x61, 0x82, 0x80, 0x01, 0x11, 0x22, 0xe8,
      0xc5, 0x67, 0x45, 0x64, 0x4a, 0xe0, 0x93, 0x87, 0x07, 0x48, 0x13, 0x07,
      0x04, 0x48, 0x06, 0xec, 0x26, 0xe4, 0x33, 0x89, 0xe7, 0x40, 0x63, 0x8d,
      0xe7, 0x00, 0x13, 0x59, 0x39, 0x40, 0x13, 0x04, 0x04, 0x48, 0x81, 0x44,
      0x1c, 0x60, 0x85, 0x04, 0x21, 0x04, 0x82, 0x97, 0xe3, 0xec, 0x24, 0xff,
      0x45, 0x64, 0xc5, 0x67, 0x93, 0x87, 0x07, 0x49, 0x13, 0x07, 0x04, 0x48,
      0x33, 0x89, 0xe7, 0x40, 0x13, 0x59, 0x39, 0x40, 0x63, 0x8b, 0xe7, 0x00,
      0x13, 0x04, 0x04, 0x48, 0x81, 0x44, 0x1c, 0x60, 0x85, 0x04, 0x21, 0x04,
      0x82, 0x97, 0xe3, 0xec, 0x24, 0xff, 0xe2, 0x60, 0x42, 0x64, 0xa2, 0x64,
      0x02, 0x69, 0x05, 0x61, 0x82, 0x80, 0x3d, 0x43, 0x2a, 0x87, 0x63, 0x71,
      0xc3, 0x02, 0x93, 0x77, 0xf7, 0x00, 0xc1, 0xe3, 0xbd, 0xe1, 0x93, 0x76,
      0x06, 0xff, 0x3d, 0x8a, 0xba, 0x96, 0x0c, 0xe3, 0x0c, 0xe7, 0x41, 0x07,
      0xe3, 0x6d, 0xd7, 0xfe, 0x11, 0xe2, 0x82, 0x80, 0xb3, 0x06, 0xc3, 0x40,
      0x8a, 0x06, 0x97, 0x02, 0x00, 0x00, 0x96, 0x96, 0x67, 0x80, 0xa6, 0x00,
      0x23, 0x07, 0xb7, 0x00, 0xa3, 0x06, 0xb7, 0x00, 0x23, 0x06, 0xb7, 0x00,
      0xa3, 0x05, 0xb7, 0x00, 0x23, 0x05, 0xb7, 0x00, 0xa3, 0x04, 0xb7, 0x00,
      0x23, 0x04, 0xb7, 0x00, 0xa3, 0x03, 0xb7, 0x00, 0x23, 0x03, 0xb7, 0x00,
      0xa3, 0x02, 0xb7, 0x00, 0x23, 0x02, 0xb7, 0x00, 0xa3, 0x01, 0xb7, 0x00,
      0x23, 0x01, 0xb7, 0x00, 0xa3, 0x00, 0xb7, 0x00, 0x23, 0x00, 0xb7, 0x00,
      0x82, 0x80, 0x93, 0xf5, 0xf5, 0x0f, 0x93, 0x96, 0x85, 0x00, 0xd5, 0x8d,
      0x93, 0x96, 0x05, 0x01, 0xd5, 0x8d, 0x93, 0x96, 0x05, 0x02, 0xd5, 0x8d,
      0x59, 0xb7, 0x93, 0x96, 0x27, 0x00, 0x97, 0x02, 0x00, 0x00, 0x96, 0x96,
      0x86, 0x82, 0xe7, 0x80, 0x26, 0xfa, 0x96, 0x80, 0xc1, 0x17, 0x1d, 0x8f,
      0x3e, 0x96, 0xe3, 0x71, 0xc3, 0xf8, 0x9d, 0xb7, 0x5d, 0x71, 0x52, 0xf0,
      0x03, 0xba, 0x81, 0xf4, 0x4a, 0xf8, 0x86, 0xe4, 0x03, 0x39, 0x8a, 0x1f,
      0xa2, 0xe0, 0x26, 0xfc, 0x4e, 0xf4, 0x56, 0xec, 0x5a, 0xe8, 0x5e, 0xe4,
      0x62, 0xe0, 0x63, 0x08, 0x09, 0x02, 0x2a, 0x8b, 0xae, 0x8b, 0x85, 0x4a,
      0xfd, 0x59, 0x83, 0x24, 0x89, 0x00, 0x1b, 0x84, 0xf4, 0xff, 0x63, 0x4e,
      0x04, 0x00, 0x8e, 0x04, 0xca, 0x94, 0x63, 0x86, 0x0b, 0x02, 0x83, 0xb7,
      0x84, 0x20, 0x63, 0x82, 0x77, 0x03, 0x7d, 0x34, 0xe1, 0x14, 0xe3, 0x18,
      0x34, 0xff, 0xa6, 0x60, 0x06, 0x64, 0xe2, 0x74, 0x42, 0x79, 0xa2, 0x79,
      0x02, 0x7a, 0xe2, 0x6a, 0x42, 0x6b, 0xa2, 0x6b, 0x02, 0x6c, 0x61, 0x61,
      0x82, 0x80, 0x83, 0x27, 0x89, 0x00, 0x98, 0x64, 0xfd, 0x37, 0x63, 0x84,
      0x87, 0x04, 0x23, 0xb4, 0x04, 0x00, 0x61, 0xdb, 0x83, 0x27, 0x09, 0x31,
      0xbb, 0x96, 0x8a, 0x00, 0x03, 0x2c, 0x89, 0x00, 0xf5, 0x8f, 0x81, 0x27,
      0x89, 0xef, 0x02, 0x97, 0x03, 0x27, 0x89, 0x00, 0x83, 0x37, 0x8a, 0x1f,
      0x63, 0x14, 0x87, 0x01, 0xe3, 0x87, 0x27, 0xfb, 0xcd, 0xdb, 0x3e, 0x89,
      0x69, 0xb7, 0x83, 0x27, 0x49, 0x31, 0x83, 0xb5, 0x84, 0x10, 0xf5, 0x8f,
      0x81, 0x27, 0x99, 0xe7, 0x5a, 0x85, 0x02, 0x97, 0xe1, 0xbf, 0x23, 0x24,
      0x89, 0x00, 0x75, 0xbf, 0x2e, 0x85, 0x02, 0x97, 0xf1, 0xb7, 0xaa, 0x85,
      0x81, 0x46, 0x01, 0x46, 0x01, 0x45, 0x1d, 0xa8, 0x01, 0x11, 0x22, 0xe8,
      0xc5, 0x67, 0x45, 0x64, 0x93, 0x87, 0x07, 0x49, 0x13, 0x04, 0x84, 0x49,
      0x1d, 0x8c, 0x26, 0xe4, 0x06, 0xec, 0x93, 0x54, 0x34, 0x40, 0x81, 0xc8,
      0x61, 0x14, 0x3e, 0x94, 0x1c, 0x60, 0xfd, 0x14, 0x61, 0x14, 0x82, 0x97,
      0xe5, 0xfc, 0xe2, 0x60, 0x42, 0x64, 0xa2, 0x64, 0x05, 0x61, 0x82, 0x80,
      0x03, 0xb7, 0x81, 0xf4, 0x83, 0x37, 0x87, 0x1f, 0xb1, 0xc3, 0x98, 0x47,
      0x7d, 0x48, 0x63, 0x42, 0xe8, 0x06, 0x05, 0xc5, 0x13, 0x18, 0x37, 0x00,
      0x3e, 0x98, 0x23, 0x38, 0xc8, 0x10, 0x83, 0xa8, 0x07, 0x31, 0x05, 0x46,
      0x3b, 0x16, 0xe6, 0x00, 0xb3, 0xe8, 0xc8, 0x00, 0x23, 0xa8, 0x17, 0x31,
      0x23, 0x38, 0xd8, 0x20, 0x89, 0x46, 0x63, 0x00, 0xd5, 0x02, 0x93, 0x06,
      0x27, 0x00, 0x8e, 0x06, 0x05, 0x27, 0x98, 0xc7, 0xb6, 0x97, 0x8c, 0xe3,
      0x01, 0x45, 0x82, 0x80, 0x93, 0x07, 0x07, 0x20, 0x23, 0x3c, 0xf7, 0x1e,
      0x5d, 0xbf, 0x83, 0xa6, 0x47, 0x31, 0x01, 0x45, 0xd1, 0x8e, 0x23, 0xaa,
      0xd7, 0x30, 0x93, 0x06, 0x27, 0x00, 0x8e, 0x06, 0x05, 0x27, 0x98, 0xc7,
      0xb6, 0x97, 0x8c, 0xe3, 0x82, 0x80, 0x7d, 0x55, 0x82, 0x80, 0x93, 0x08,
      0xd0, 0x05, 0x73, 0x00, 0x00, 0x00, 0x63, 0x43, 0x05, 0x00, 0x01, 0xa0,
      0x41, 0x11, 0x22, 0xe0, 0x2a, 0x84, 0x06, 0xe4, 0x3b, 0x04, 0x80, 0x40,
      0xef, 0x00, 0x80, 0x00, 0x00, 0xc1, 0x01, 0xa0, 0x03, 0xb5, 0x81, 0xf5,
      0x82, 0x80};

  auto elf_content{
      riscv_elf::Parse("/work/2024/riscv-elf-lib/test/data/test.elf")};

  assert(rng::equal(expected_bytecode, elf_content.text_bytecode,
                    [](std::uint8_t const lhs, std::byte const rhs) -> bool {
                      return std::cmp_equal(lhs,
                                            static_cast<std::uint8_t>(rhs));
                    }));
}

auto main() -> int { ParseTest(); }
